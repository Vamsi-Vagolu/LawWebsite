generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  notes            Note[]
  viewedNotes      ViewedNote[]
  favoriteNotes    UserFavoriteNote[]
  testAttempts     TestAttempt[]
  createdTests     Test[] // Tests created by this user (if admin/owner)
  bareActs         BareAct[] // Bare acts created by this user (if admin/owner)
  contactResponses ContactSubmission[] // Contact submissions responded to by this user
  blogPosts        BlogPost[] // Blog posts created by this user
  blogViews        BlogView[] // Blog views by this user
  analyticsEvents  AnalyticsEvent[] // Analytics events associated with this user
  userActivities   UserActivity[] // Activities performed by this user

  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Note {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String?
  slug        String   @unique
  pdfFile     String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewedNotes   ViewedNote[]
  favoriteNotes UserFavoriteNote[]

  @@index([slug])
  @@index([userId])
  @@index([category])
  @@index([createdAt])
}

model ViewedNote {
  id     String @id @default(cuid())
  userId String
  noteId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([userId, noteId])
  @@index([userId])
  @@index([noteId])
}

model UserFavoriteNote {
  id     String @id @default(cuid())
  userId String
  noteId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([userId, noteId])
  @@index([userId])
  @@index([noteId])
}

// âœ… NEW TEST MODELS
model Test {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String?  // e.g., "Constitutional Law", "Criminal Law"
  difficulty  Difficulty @default(MEDIUM)
  timeLimit   Int      // Time limit in minutes
  totalQuestions Int   // Total number of questions
  passingScore   Float @default(60.0) // Passing percentage
  isPublished Boolean @default(false)
  createdBy   String   // User who created this test
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator   User @relation(fields: [createdBy], references: [id])
  questions Question[]
  attempts  TestAttempt[]

  @@index([category])
  @@index([difficulty])
  @@index([isPublished])
  @@index([createdBy])
  @@index([createdAt])
  @@index([category, difficulty, isPublished]) // Composite index for filtering
  @@index([isPublished, createdAt]) // For published tests ordered by date
}

model Question {
  id             String @id @default(cuid())
  testId         String
  questionNumber Int
  question       String @db.Text
  options        Json   // <-- Add this line
  correctAnswer  String // 'A', 'B', 'C', 'D'
  explanation    String? @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@index([questionNumber])
}

model TestAttempt {
  id          String    @id @default(cuid())
  testId      String
  userId      String
  answers     Json      // Store user answers as JSON: {"1": "A", "2": "B", "3": "C"}
  score       Float?    // Percentage score (0-100)
  correctCount Int?     // Number of correct answers
  totalQuestions Int?   // Total questions in test at time of attempt
  timeSpent   Int?      // Time spent in minutes
  isCompleted Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@index([userId])
  @@index([isCompleted])
  @@index([createdAt])
  @@index([testId, userId, isCompleted]) // Composite index for common queries
  @@index([userId, isCompleted, score]) // For user performance queries
}

model MaintenanceSettings {
  id        String    @id @default("1")
  isEnabled Boolean   @default(false)
  message   String?
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("maintenance_settings")
}

model MaintenanceMode {
  id        String   @id @default(cuid())
  isEnabled Boolean  @default(false)
  message   String?
  endTime   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BareAct {
  id          String         @id @default(cuid())
  title       String
  description String?
  category    BareActCategory
  slug        String         @unique
  pdfFile     String?
  order       Int            @default(0) // For sorting acts within a category
  createdBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([slug])
  @@index([createdBy])
  @@index([createdAt])
  @@index([category, order]) // Composite index for category-based ordering
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum BareActCategory {
  AIBE
  ALL
}

// Contact Form Model
model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String   @db.Text
  category  ContactCategory @default(GENERAL)
  status    ContactStatus   @default(NEW)
  adminNotes String? @db.Text
  respondedAt DateTime?
  respondedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  responder User? @relation(fields: [respondedBy], references: [id])

  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([email])
}

// Blog Model
model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?     @db.Text
  content     String      @db.Text
  featuredImage String?
  status      BlogStatus  @default(DRAFT)
  category    String?
  tags        String[]    @default([])
  authorId    String
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id])
  views  BlogView[]

  @@index([status])
  @@index([authorId])
  @@index([publishedAt])
  @@index([slug])
  @@index([category])
}

// Blog View Tracking
model BlogView {
  id        String   @id @default(cuid())
  blogId    String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  blog BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user User?    @relation(fields: [userId], references: [id])

  @@index([blogId])
  @@index([userId])
  @@index([createdAt])
  @@index([ipAddress])
}

// Analytics and Metrics Model
model AnalyticsEvent {
  id         String      @id @default(cuid())
  eventType  EventType
  eventName  String
  userId     String?
  sessionId  String?
  ipAddress  String?
  userAgent  String?
  page       String?
  referrer   String?
  properties Json?       // Store additional event properties
  createdAt  DateTime    @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([eventType])
  @@index([eventName])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@index([page])
}

// Daily Analytics Summary
model DailyAnalytics {
  id                String   @id @default(cuid())
  date              DateTime @unique @db.Date
  totalPageViews    Int      @default(0)
  uniqueVisitors    Int      @default(0)
  totalSessions     Int      @default(0)
  avgSessionTime    Float?   // in seconds
  bounceRate        Float?   // percentage
  newUsers          Int      @default(0)
  returningUsers    Int      @default(0)
  topPages          Json?    // Array of {page, views}
  topReferrers      Json?    // Array of {referrer, count}
  deviceTypes       Json?    // {desktop, mobile, tablet}
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([date])
}

// User Activity Tracking
model UserActivity {
  id         String       @id @default(cuid())
  userId     String
  activity   ActivityType
  entityType String?      // e.g., 'note', 'test', 'blog'
  entityId   String?
  metadata   Json?        // Store additional activity data
  createdAt  DateTime     @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([activity])
  @@index([entityType])
  @@index([createdAt])
  @@index([userId, createdAt])
}

enum ContactCategory {
  GENERAL
  SUPPORT
  FEEDBACK
  PARTNERSHIP
  OTHER
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EventType {
  PAGE_VIEW
  USER_ACTION
  SYSTEM_EVENT
}

enum ActivityType {
  LOGIN
  LOGOUT
  VIEW_NOTE
  DOWNLOAD_NOTE
  FAVORITE_NOTE
  START_TEST
  COMPLETE_TEST
  SEARCH
  CONTACT_FORM
  BLOG_VIEW
  PROFILE_UPDATE
}
