generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  notes            Note[]
  quizzes          Quiz[]
  viewedNotes      ViewedNote[]
  favoriteNotes    UserFavoriteNote[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Note {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String?
  slug        String   @unique
  pdfFile     String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizzes       Quiz[]
  viewedNotes   ViewedNote[]
  favoriteNotes UserFavoriteNote[]

  @@index([slug])
  @@index([userId])
  @@index([category])
  @@index([createdAt])
}

model Quiz {
  id        String   @id @default(cuid())
  title     String
  noteId    String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  note      Note?      @relation(fields: [noteId], references: [id], onDelete: SetNull)
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  questions Question[]

  @@index([noteId])
  @@index([userId])
}

model Question {
  id        String   @id @default(cuid())
  question  String
  options   String[] // Array of options
  answer    String   // Correct answer
  quizId    String
  createdAt DateTime @default(now())

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model ViewedNote {
  id     String @id @default(cuid())
  userId String
  noteId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([userId, noteId])
  @@index([userId])
  @@index([noteId])
}

model UserFavoriteNote {
  id     String @id @default(cuid())
  userId String
  noteId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([userId, noteId])
  @@index([userId])
  @@index([noteId])
}

model MaintenanceSettings {
  id        String    @id @default("1")
  isEnabled Boolean   @default(false)
  message   String?
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("maintenance_settings")
}

model MaintenanceMode {
  id        String   @id @default(cuid())
  isEnabled Boolean  @default(false)
  message   String?
  endTime   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  OWNER
}
