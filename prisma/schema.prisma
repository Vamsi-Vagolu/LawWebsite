generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//
// ðŸ”‘ NextAuth Models
//

enum Role {
  OWNER
  ADMIN
  USER
  // add more roles here later
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER) // default role is USER
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  notes     Note[]             @relation("UserNotes")
  quizzes   Quiz[]
  favorites UserFavoriteNote[]
  viewed    ViewedNote[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// ðŸ“š App-specific Models
//
model Note {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  description String?
  category    String?
  pdfFile     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation("UserNotes", fields: [userId], references: [id])

  favorites UserFavoriteNote[]
  viewed    ViewedNote[]
  quizzes   Quiz[]
}

model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  noteId    String? // optional foreign key
  note      Note?      @relation(fields: [noteId], references: [id])
  questions Question[]
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?
}

model Question {
  id        Int      @id @default(autoincrement())
  question  String
  options   String[] // store as array
  answer    String
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFavoriteNote {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  note      Note     @relation(fields: [noteId], references: [id])
  noteId    String
  createdAt DateTime @default(now())

  @@unique([userId, noteId])
}

model ViewedNote {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  note     Note     @relation(fields: [noteId], references: [id])
  noteId   String
  viewedAt DateTime @default(now())

  @@index([userId, viewedAt])
}
